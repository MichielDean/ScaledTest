/**
 * Sample data generator for testing the sunburst visualization
 */

import {
  TestResultData,
  Team,
  Application,
  TestSuite,
  TestExecution,
  TestCase,
  TestResult,
  TestCaseStatus,
  TestResultStatus,
  TestExecutionStatus,
} from '../models/testResults';

/**
 * Generates sample test result data for visualization testing
 */
export function generateSampleTestData(): TestResultData {
  const now = new Date().toISOString();

  // Sample teams
  const teams: Team[] = [
    {
      id: 'team-1',
      name: 'Frontend Team',
      description: 'Responsible for user interface and experience',
      createdAt: now,
      tags: ['frontend', 'ui', 'react'],
    },
    {
      id: 'team-2',
      name: 'Backend Team',
      description: 'Handles server-side logic and APIs',
      createdAt: now,
      tags: ['backend', 'api', 'microservices'],
    },
    {
      id: 'team-3',
      name: 'Mobile Team',
      description: 'Develops mobile applications',
      createdAt: now,
      tags: ['mobile', 'ios', 'android'],
    },
  ];

  // Sample applications
  const applications: Application[] = [
    {
      id: 'app-1',
      teamId: 'team-1',
      name: 'Web Portal',
      description: 'Main customer-facing web application',
      version: '2.1.0',
      repositoryUrl: 'https://github.com/company/web-portal',
      createdAt: now,
      tags: ['web', 'portal', 'customer'],
    },
    {
      id: 'app-2',
      teamId: 'team-1',
      name: 'Admin Dashboard',
      description: 'Internal administration dashboard',
      version: '1.5.0',
      repositoryUrl: 'https://github.com/company/admin-dashboard',
      createdAt: now,
      tags: ['admin', 'internal'],
    },
    {
      id: 'app-3',
      teamId: 'team-2',
      name: 'User Service API',
      description: 'Microservice for user management',
      version: '3.0.1',
      repositoryUrl: 'https://github.com/company/user-service',
      createdAt: now,
      tags: ['api', 'users', 'auth'],
    },
    {
      id: 'app-4',
      teamId: 'team-3',
      name: 'Mobile App',
      description: 'Cross-platform mobile application',
      version: '1.2.0',
      repositoryUrl: 'https://github.com/company/mobile-app',
      createdAt: now,
      tags: ['mobile', 'cross-platform'],
    },
  ];

  // Sample test suites
  const testSuites: TestSuite[] = [
    {
      id: 'suite-1',
      applicationId: 'app-1',
      name: 'Login Flow Tests',
      description: 'Tests for user authentication and login process',
      sourceLocation: 'tests/e2e/login.spec.ts',
      createdAt: now,
      tags: ['login', 'auth', 'e2e'],
    },
    {
      id: 'suite-2',
      applicationId: 'app-1',
      name: 'Checkout Process Tests',
      description: 'End-to-end tests for the checkout flow',
      sourceLocation: 'tests/e2e/checkout.spec.ts',
      createdAt: now,
      tags: ['checkout', 'payment', 'e2e'],
    },
    {
      id: 'suite-3',
      applicationId: 'app-2',
      name: 'User Management Tests',
      description: 'Tests for admin user management features',
      sourceLocation: 'tests/e2e/user-management.spec.ts',
      createdAt: now,
      tags: ['admin', 'users'],
    },
    {
      id: 'suite-4',
      applicationId: 'app-3',
      name: 'API Integration Tests',
      description: 'Integration tests for user service endpoints',
      sourceLocation: 'tests/integration/user-api.spec.ts',
      createdAt: now,
      tags: ['api', 'integration'],
    },
  ];

  // Sample test executions
  const testExecutions: TestExecution[] = [
    {
      id: 'exec-1',
      testSuiteId: 'suite-1',
      status: 'completed' as TestExecutionStatus,
      startedAt: now,
      completedAt: now,
      environment: { browser: 'Chrome', os: 'Windows', version: '91.0' },
      triggeredBy: 'CI Pipeline',
      buildId: 'build-123',
      createdAt: now,
      testCases: [],
    },
    {
      id: 'exec-2',
      testSuiteId: 'suite-2',
      status: 'failed' as TestExecutionStatus,
      startedAt: now,
      completedAt: now,
      environment: { browser: 'Firefox', os: 'Linux', version: '89.0' },
      triggeredBy: 'developer@company.com',
      buildId: 'build-124',
      createdAt: now,
      testCases: [],
    },
    {
      id: 'exec-3',
      testSuiteId: 'suite-3',
      status: 'completed' as TestExecutionStatus,
      startedAt: now,
      completedAt: now,
      environment: { browser: 'Safari', os: 'macOS', version: '14.0' },
      triggeredBy: 'CI Pipeline',
      buildId: 'build-125',
      createdAt: now,
      testCases: [],
    },
  ];

  // Sample test cases
  const testCases: TestCase[] = [
    {
      id: 'case-1',
      testExecutionId: 'exec-1',
      name: 'Valid Login',
      description: 'Test login with valid credentials',
      status: 'passed' as TestCaseStatus,
      startedAt: now,
      completedAt: now,
      durationMs: 2500,
      createdAt: now,
      testResults: [],
    },
    {
      id: 'case-2',
      testExecutionId: 'exec-1',
      name: 'Invalid Login',
      description: 'Test login with invalid credentials',
      status: 'passed' as TestCaseStatus,
      startedAt: now,
      completedAt: now,
      durationMs: 1800,
      createdAt: now,
      testResults: [],
    },
    {
      id: 'case-3',
      testExecutionId: 'exec-2',
      name: 'Add Item to Cart',
      description: 'Test adding an item to shopping cart',
      status: 'failed' as TestCaseStatus,
      startedAt: now,
      completedAt: now,
      durationMs: 3200,
      createdAt: now,
      testResults: [],
    },
    {
      id: 'case-4',
      testExecutionId: 'exec-2',
      name: 'Complete Payment',
      description: 'Test completing payment process',
      status: 'skipped' as TestCaseStatus,
      startedAt: now,
      durationMs: 0,
      createdAt: now,
      testResults: [],
    },
    {
      id: 'case-5',
      testExecutionId: 'exec-3',
      name: 'Create User',
      description: 'Test creating a new user account',
      status: 'passed' as TestCaseStatus,
      startedAt: now,
      completedAt: now,
      durationMs: 1500,
      createdAt: now,
      testResults: [],
    },
  ];

  // Sample test results with varied success rates to demonstrate gradient
  const testResults: TestResult[] = [
    // High success rate results (95%+ - dark green)
    {
      id: 'result-1',
      testCaseId: 'case-1',
      status: 'passed' as TestResultStatus,
      priority: 'high',
      name: 'Email field validation',
      description: 'Verify email field accepts valid email format',
      expected: 'Email field accepts valid email',
      actual: 'Email field accepts valid email',
      durationMs: 500,
      createdAt: now,
    },
    {
      id: 'result-2',
      testCaseId: 'case-1',
      status: 'passed' as TestResultStatus,
      priority: 'high',
      name: 'Password field validation',
      description: 'Verify password field is masked',
      expected: 'Password field shows masked characters',
      actual: 'Password field shows masked characters',
      durationMs: 300,
      createdAt: now,
    },
    {
      id: 'result-3',
      testCaseId: 'case-1',
      status: 'passed' as TestResultStatus,
      priority: 'critical',
      name: 'Login button functionality',
      description: 'Verify login button submits form',
      expected: 'User redirected to dashboard',
      actual: 'User redirected to dashboard',
      durationMs: 1700,
      createdAt: now,
    },
    {
      id: 'result-4',
      testCaseId: 'case-2',
      status: 'passed' as TestResultStatus,
      priority: 'medium',
      name: 'Error message display',
      description: 'Verify error message shows for invalid credentials',
      expected: 'Error message displayed',
      actual: 'Error message displayed',
      durationMs: 1800,
      createdAt: now,
    },

    // Medium success rate results (75-85% - yellow-green)
    {
      id: 'result-5',
      testCaseId: 'case-3',
      status: 'failed' as TestResultStatus,
      priority: 'critical',
      name: 'Cart update',
      description: 'Verify cart updates when item added',
      expected: 'Cart shows 1 item',
      actual: 'Cart shows 0 items',
      durationMs: 3200,
      createdAt: now,
      errorDetails: {
        message: 'Cart count did not update',
        stackTrace: 'Error at addToCart function line 45',
        screenshotUrl: 'https://screenshots.example.com/cart-error.png',
        consoleOutput: 'TypeError: Cannot read property of undefined',
      },
    },
    {
      id: 'result-6',
      testCaseId: 'case-3',
      status: 'passed' as TestResultStatus,
      priority: 'high',
      name: 'Cart display',
      description: 'Verify cart displays correctly',
      expected: 'Cart shows current items',
      actual: 'Cart shows current items',
      durationMs: 800,
      createdAt: now,
    },
    {
      id: 'result-7',
      testCaseId: 'case-3',
      status: 'passed' as TestResultStatus,
      priority: 'medium',
      name: 'Cart removal',
      description: 'Verify items can be removed from cart',
      expected: 'Item removed successfully',
      actual: 'Item removed successfully',
      durationMs: 900,
      createdAt: now,
    },
    {
      id: 'result-8',
      testCaseId: 'case-3',
      status: 'passed' as TestResultStatus,
      priority: 'low',
      name: 'Cart persistence',
      description: 'Verify cart persists across sessions',
      expected: 'Cart items persist',
      actual: 'Cart items persist',
      durationMs: 1200,
      createdAt: now,
    },

    // Good success rate results (90% - light green)
    {
      id: 'result-9',
      testCaseId: 'case-5',
      status: 'passed' as TestResultStatus,
      priority: 'high',
      name: 'User creation form',
      description: 'Verify user creation form submits successfully',
      expected: 'User created successfully',
      actual: 'User created successfully',
      durationMs: 1500,
      createdAt: now,
    },
    {
      id: 'result-10',
      testCaseId: 'case-5',
      status: 'passed' as TestResultStatus,
      priority: 'medium',
      name: 'User validation',
      description: 'Verify user input validation works',
      expected: 'Invalid inputs rejected',
      actual: 'Invalid inputs rejected',
      durationMs: 600,
      createdAt: now,
    },
    {
      id: 'result-11',
      testCaseId: 'case-5',
      status: 'passed' as TestResultStatus,
      priority: 'high',
      name: 'User permissions',
      description: 'Verify user permissions are set correctly',
      expected: 'Correct permissions assigned',
      actual: 'Correct permissions assigned',
      durationMs: 750,
      createdAt: now,
    },
    {
      id: 'result-12',
      testCaseId: 'case-5',
      status: 'passed' as TestResultStatus,
      priority: 'medium',
      name: 'User notification',
      description: 'Verify welcome email is sent',
      expected: 'Welcome email sent',
      actual: 'Welcome email sent',
      durationMs: 1100,
      createdAt: now,
    },
    {
      id: 'result-13',
      testCaseId: 'case-5',
      status: 'failed' as TestResultStatus,
      priority: 'low',
      name: 'User avatar upload',
      description: 'Verify user can upload avatar image',
      expected: 'Avatar uploaded successfully',
      actual: 'Avatar upload failed',
      durationMs: 2000,
      createdAt: now,
      errorDetails: {
        message: 'File upload service unavailable',
        stackTrace: 'Error at uploadAvatar function line 89',
        screenshotUrl: 'https://screenshots.example.com/upload-error.png',
        consoleOutput: 'UploadError: Service temporarily unavailable',
      },
    },

    // Low success rate results (30% - red-orange)
    {
      id: 'result-14',
      testCaseId: 'case-4',
      status: 'failed' as TestResultStatus,
      priority: 'critical',
      name: 'Payment processing',
      description: 'Verify payment gateway processes transactions',
      expected: 'Payment completed successfully',
      actual: 'Payment failed with timeout',
      durationMs: 5000,
      createdAt: now,
      errorDetails: {
        message: 'Payment gateway timeout',
        stackTrace: 'Error at processPayment function line 234',
        screenshotUrl: 'https://screenshots.example.com/payment-error.png',
        consoleOutput: 'PaymentError: Gateway timeout after 5000ms',
      },
    },
    {
      id: 'result-15',
      testCaseId: 'case-4',
      status: 'failed' as TestResultStatus,
      priority: 'high',
      name: 'Credit card validation',
      description: 'Verify credit card numbers are validated',
      expected: 'Invalid cards rejected',
      actual: 'Invalid cards accepted',
      durationMs: 800,
      createdAt: now,
      errorDetails: {
        message: 'Credit card validation failed',
        stackTrace: 'Error at validateCard function line 156',
        screenshotUrl: 'https://screenshots.example.com/card-error.png',
        consoleOutput: 'ValidationError: Invalid card format accepted',
      },
    },
    {
      id: 'result-16',
      testCaseId: 'case-4',
      status: 'failed' as TestResultStatus,
      priority: 'medium',
      name: 'Receipt generation',
      description: 'Verify receipt is generated after payment',
      expected: 'Receipt emailed to customer',
      actual: 'Receipt generation failed',
      durationMs: 1200,
      createdAt: now,
      errorDetails: {
        message: 'Email service unavailable',
        stackTrace: 'Error at sendReceipt function line 67',
        screenshotUrl: 'https://screenshots.example.com/receipt-error.png',
        consoleOutput: 'EmailError: SMTP server unreachable',
      },
    },
    {
      id: 'result-17',
      testCaseId: 'case-4',
      status: 'passed' as TestResultStatus,
      priority: 'low',
      name: 'Payment form display',
      description: 'Verify payment form renders correctly',
      expected: 'Form displays all required fields',
      actual: 'Form displays all required fields',
      durationMs: 300,
      createdAt: now,
    },
  ];

  return {
    teams,
    applications,
    testSuites,
    testExecutions,
    testCases,
    testResults,
  };
}
